y = linspace(x1, x2, n)

b = fir1(n - 1, w, type)
order n FIR filter
normalized frequency cutoff w
returns filter coefficients in b
if w is a scalar, it specifies the frequency cutoff for a lowpass or highpass filter
if w is a two-element vector, the two values specify the edges of a bandpass or bandstop filter
type can be "low", "high", "stop", "pass", "bandpass"

[h, w] = freqz(b, a, n, fs)
complex frequency response h
w is a vector of the frequencies
IIR filter with numerator and denominator coefficients b and a
n angular frequencies between 0 and 2*pi
if a is omitted, the denominator is assumed to be 1 (this corresponds to a simple FIR filter)
if n is omitted, a value of 512 is assumed
fs - return frequencies in Hz, instead of radians assuming a sampling rate fs

y = filter(b, a, x)
numerator and denominator coefficients b and a
the denominator is 1 for a simple FIR filter
x - input signal

y = ssbmod(x, fc, fs, phi, band)
x - message signal
fc - carrier frequency
fs - sampling frequency

fftshift(x)
for use with the fft and ifft functions
performs a shift of the vector x, in order to move the frequency 0 to the center of the vector

y = decimate(x, q, n, "fir")
downsample the signal x by a reduction factor of q
a lowpass antialiasing filter is applied to the signal, prior to reducing the input sequence
by default, an order n Chebyshev type I filter is used
if n is not specified, the default is 8
if the optional argument "fir" is given, an order n FIR filter is used, with a default order of 30 if n is not given

IQ to real:
RF = I*cos(2*pi*f*t) + Q*sin(2*pi*f*t)
I = RF*cos(2*pi*f*t)
Q = RF*sin(2*pi*f*t)
A = (I²+Q²)½
ϕ = tan⁻¹(Q/I)
I = A*cos(ϕ)
Q = A*sin(ϕ)
converting IQ to a plain signal: I is the original signal
